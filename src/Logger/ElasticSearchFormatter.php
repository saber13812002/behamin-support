<?phpnamespace Behamin\Support\Logger;use Monolog\Formatter\NormalizerFormatter;use Monolog\Utils;use \DateTimeInterface;class ElasticSearchFormatter extends NormalizerFormatter{    protected string $index;    protected string $type;    public function __construct(string $index, string $type)    {        // Elasticsearch requires an ISO 8601 format date with optional millisecond precision.        parent::__construct(DateTimeInterface::ISO8601);        $this->index = $index;        $this->type = $type;    }    /**     * {@inheritDoc}     */    public function format(array $record)    {        $record = parent::format($record);        if ($this->isArrayAssociative($record['context'])) {            $record['context'] = Utils::jsonEncode($record['context']);        }        return $this->getDocument($record);    }    function isArrayAssociative(array $array): bool    {        return count(array_filter(array_keys($array), 'is_string')) > 0;    }    /**     * Getter index     *     * @return string     */    public function getIndex(): string    {        return $this->index;    }    /**     * Getter type     *     * @return string     */    public function getType(): string    {        return $this->type;    }    /**     * Convert a log message into an Elasticsearch record     *     * @param  array  $record Log message     * @return array     */    protected function getDocument(array $record): array    {        $record['_index'] = $this->index;        $record['_type'] = $this->type;        return $record;    }}